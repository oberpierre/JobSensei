from enum import Enum
from string import Template

class Prompt(Enum):
    CATEGORIZE = """Job listing:
$listing

From the provided job listing, extract and categorize details into a JSON format:
{
  "jobTitle": string,
  "role": {
    "team": string,
    "department": string,
  },
  "summary": string (autogenerated brief description based on the provided listing),
  "company": string,
  "location": {
    "city": string,
    "country": string (ISO 3166-1 alpha-2 country code, e.g. SG for Singapore)
  },
  "skills": string[],
  "employmentType": "full" | "part" | "temp" | "n/a" (default to n/a if not specified),
  "responsibilities": string[],
  "qualifications": {
    "required": string[],
    "preferred": string[]
  },
  "other": string[] (miscellaneous info not fitting into other properties)
}.
If properties are not specified and not inferrable in the listing, default to empty string or empty array corresponding to the properties data type."""

class Prompts:
    """A class for managing and utilizing prompts."""

    @staticmethod
    def _get_template(prompt):
        """Retrieve a string template associated with the given prompt."""
        return Template(prompt.value)

    @staticmethod
    def get_categorize_prompt(listing):
        """Generate a prompt and associated LLM args for the categorization for a job listing."""
        template = Prompts._get_template(Prompt.CATEGORIZE)
        prompt = template.substitute(listing=listing)
        return (prompt, ('-c', '2048'))